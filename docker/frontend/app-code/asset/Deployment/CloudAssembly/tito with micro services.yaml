formatVersion: 1
#BP created by Vincent Meoc to deploy Tito Part4
#dependencies are:
# AWS account
# lambda function in S3 to import (cf https://github.com/vmeoc/Tito/tree/master/asset/Deployment/FaaS/AWS)
# Region, VPC, SG, 2 subnets dispatched over 2 zones, Group subnet for RDS, IAM role for Lambda service with AWSLambdaVPCAccessExecutionRole &  AmazonRDSFullAccess, Route 53 zone
#Set the region for all the services necessary
#Cf comments below to know where to place these information
#if too static, feel free to modify it to make it dynamic :)
#TODO:
# tags all services
inputs:
  aws_account:
    type: string
    enum:
      - AWS perso Vince
      - Rob AWS
    default: Rob AWS
  customer_name:
    type: string
  titoVersion:
    type: string
    description: Version de code de Tito
    enum:
      - V2.1
      - V2
      - V1.9.4
      - V1.8.9
      - V1.7.1
      - v1.5
    default: V2.1
  Region:
    type: string
    enum:
      - eu-west-1
    default: eu-west-1
  FrontEndNumber:
    title: Number of Front End
    type: integer
    default: 1
  architecture:
    type: string
    enum:
      - cheap
      - expensive
    default: cheap
resources:
  LoadBalancer:
    type: Cloud.LoadBalancer
    metadata:
      layoutPosition:
        - 0
        - 2
    properties:
      count: '${input.architecture == "cheap" ? 0 : 1}'
      name: LB
      routes:
        - port: 80
          protocol: http
          instanceProtocol: http
          instancePort: 80
      network: '${resource.Public_Nw.name}'
      instances:
        - '${resource.Front_end.id}'
      internetFacing: true
  Front_end:
    type: Cloud.Machine
    dependsOn:
      - DB
      - API_Gw_Deployment
    metadata:
      layoutPosition:
        - 0
        - 3
    count: '${FrontEndNumber}'
    properties:
      image: CentosV7
      flavor: small
      remoteAccess:
        authentication: publicPrivateKey
        sshKey: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzkN9Sbxj9H77Mrt+8QB/NQn+bqR0ZDx6vvoNeGpkeTbaOhL/6cd9zq+ZYx0hNzc2bPLI4S3NQ8CcAt1gdFdIPte38+gnk1+M+z1oqy2sh+TLFz4hBrdJ3JxTWW/b4Yex5uKbscKEjl2WiW+3MQfP5g5pZkWF3AbWQDAEI8BANn80eZU7q4yDMuW4TsCUEuNmrYjaTyi2S6i3WhngaAlZqdQzPvqUh/JTcmwTXx30XmsoVbG9NHEcbTehhoaHuKSCaCN5pBJ5uXEe4Oxjxa3AAU90YorC140Jw5mkQ4/5earNTqggBiI+uxQCHhC867GCyt9rlgJZZ1F0TlUYDymgx imported-openssh-key
        username: vince
      networks:
        - name: '${resource.Public_Nw.name}'
          network: '${resource.Public_Nw.id}'
      cloudConfig: |
        #cloud-config
        packages:
          - git
          - mysql
        runcmd:
          - cd /tmp
          - git clone https://github.com/vmeoc/Tito
          - cd Tito/asset/Deployment/CloudAssembly/titodb
          - chmod u+x *.sh
          - [ /tmp/Tito/asset/Deployment/CloudAssembly/titodb/tito_as.sh, ${resource.DB.address} ]
          - sed -i -e 's|API_GW|https://${resource.API_Gateway_Rest.id}.execute-api.${input.Region}.amazonaws.com/${input.customer_name}|g' /var/www/html/index.php
          - mysql -u root -h ${input.architecture == "cheap" ? resource.DB.address : resource.RDS_Cluster_Instance.endpoint[0]} -pTito2016 << EOF
          - create database if not exists Tito4DB;
          - use Tito4DB;
          - CREATE TABLE TitoTable (name VARCHAR(50) NOT NULL, picture VARCHAR(200) NOT NULL, capa INT, location INT, available INT);
          - INSERT INTO TitoTable VALUES("Audi Q7","https://s3-eu-west-1.amazonaws.com/tito4picture/2018-audi-q7-20-tfsi-quattro-komfort.png",70,0.2,1);
          - INSERT INTO TitoTable VALUES("Tesla Model S"," https://s3-eu-west-1.amazonaws.com/tito4picture/tesla2.png",88,0.1,0);
          - INSERT INTO TitoTable VALUES("Audi A3 Electric", "https://s3-eu-west-1.amazonaws.com/tito4picture/AudiA3r.png", 20, 0.6,1);
          - INSERT INTO TitoTable VALUES("BMW Serie 3", "https://s3-eu-west-1.amazonaws.com/tito4picture/BMW-i3-Electric-Car.png", 55, 1.2, 1);
          - INSERT INTO TitoTable VALUES("BMW Serie 4", "https://s3-eu-west-1.amazonaws.com/tito4picture/BMX-serie-4.png", 43, 0.8, 1);
          - INSERT INTO TitoTable VALUES("Drone", "https://s3-eu-west-1.amazonaws.com/tito4picture/Flyride185.png", 28, 0.1, 1);
          - INSERT INTO TitoTable VALUES("Peugeot 3008", "https://s3-eu-west-1.amazonaws.com/tito4picture/Peugeot-3008.png", 89, 0.3, 1);
          - INSERT INTO TitoTable VALUES("Suzuki 750", "https://s3-eu-west-1.amazonaws.com/tito4picture/Suzuki-750.png", 68, 0.9, 1);
          - INSERT INTO TitoTable VALUES("Renault Grand scenic", "https://s3-eu-west-1.amazonaws.com/tito4picture/renault_grand-scenic.png", 81, 0.4, 1);
          - INSERT INTO TitoTable VALUES("Smart Roadster", "https://s3-eu-west-1.amazonaws.com/tito4picture/smart+roadster.png", 52, 0.7, 1);
          - EOF
  Route53_Record:
    type: Cloud.Service.AWS.Route53.Record
    metadata:
      layoutPosition:
        - 0
        - 1
    properties:
      name: '${input.customer_name}'
      type: '${input.architecture == "cheap" ? "A" : "CNAME"}'
      region: eu-west-1
      account: AWS perso Vince
      zone_id: Z30ZHGUZ2HHA3L
      records:
        - '${input.architecture == "cheap" ? resource.Front_end.address : resource.LoadBalancer.address}'
      ttl: 60
  DB:
    type: Cloud.Machine
    metadata:
      layoutPosition:
        - 0
        - 4
    properties:
      image: CentosV7
      flavor: small
      networks:
        - name: '${resource.Public_Nw.name}'
          network: '${resource.Public_Nw.id}'
      remoteAccess:
        authentication: publicPrivateKey
        sshKey: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzkN9Sbxj9H77Mrt+8QB/NQn+bqR0ZDx6vvoNeGpkeTbaOhL/6cd9zq+ZYx0hNzc2bPLI4S3NQ8CcAt1gdFdIPte38+gnk1+M+z1oqy2sh+TLFz4hBrdJ3JxTWW/b4Yex5uKbscKEjl2WiW+3MQfP5g5pZkWF3AbWQDAEI8BANn80eZU7q4yDMuW4TsCUEuNmrYjaTyi2S6i3WhngaAlZqdQzPvqUh/JTcmwTXx30XmsoVbG9NHEcbTehhoaHuKSCaCN5pBJ5uXEe4Oxjxa3AAU90YorC140Jw5mkQ4/5earNTqggBiI+uxQCHhC867GCyt9rlgJZZ1F0TlUYDymgx imported-openssh-key
        username: vince
      cloudConfig: |
        packages:
          - mysql
          - mariadb-server
          - mariadb
        runcmd:
          - sudo systemctl enable mariadb.service
          - sudo systemctl start mariadb.service
          - mysql -u root << EOF
          - USE mysql;
          - SELECT user,host FROM user;
          - GRANT ALL PRIVILEGES ON *.* TO root@'%' WITH GRANT OPTION;
          - EOF
        #to update the root password
          - sudo systemctl stop mariadb.service
          - sudo mysqld_safe --skip-grant-tables &
          - mysql -u root << EOF
          - UPDATE mysql.user SET Password=PASSWORD('Tito2016') WHERE User='root';
          - FLUSH PRIVILEGES;
          - EOF
          - sudo mysqladmin -u root -pTito2016 shutdown
          - sudo systemctl start mariadb.service
          
          #create conf DB and table
          - mysql -u root -pTito2016 << EOF
          - create database if not exists TitoDB;
          - use TitoDB;
          - CREATE TABLE TitoTable (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, home VARCHAR(50) NOT NULL, work VARCHAR(50) NOT NULL, hour_home_departure VARCHAR(50) NOT NULL, hour_work_departure VARCHAR(50) NOT NULL)
          - EOF
  Public_Nw:
    type: Cloud.Network
    metadata:
      layoutPosition:
        - 1
        - 0
    properties:
      name: All Open - Dev
      networkType: existing
      constraints:
        - tag: 'bill:rob'
  API_Gw_Deployment:
    type: Cloud.Service.AWS.API.Gateway.Deployment
    dependsOn:
      - Read_Integration
      - Reset_Integration
      - Book_Integration
    metadata:
      layoutPosition:
        - 2
        - 2
    properties:
      account: '${input.aws_account}'
      stage_name: '${input.customer_name}'
      rest_api_id: '${resource.API_Gateway_Rest.id}'
      region: eu-west-1
  API_Gateway_Rest:
    type: Cloud.Service.AWS.API.Gateway.Rest.API
    metadata:
      layoutPosition:
        - 3
        - 2
    properties:
      name: 'Tito-API_GW-${env.deploymentName}-${input.customer_name}'
      account: '${input.aws_account}'
      region: eu-west-1
  Resource_Read:
    type: Cloud.Service.AWS.API.Gateway.Resource
    metadata:
      layoutPosition:
        - 4
        - 1
    properties:
      account: '${input.aws_account}'
      parent_id: '${resource.API_Gateway_Rest.root_resource_id}'
      path_part: read
      rest_api_id: '${resource.API_Gateway_Rest.id}'
      region: eu-west-1
  Resource_Book:
    type: Cloud.Service.AWS.API.Gateway.Resource
    metadata:
      layoutPosition:
        - 4
        - 2
    properties:
      account: '${input.aws_account}'
      parent_id: '${resource.API_Gateway_Rest.root_resource_id}'
      path_part: book
      rest_api_id: '${resource.API_Gateway_Rest.id}'
      region: eu-west-1
  Resource_Reset:
    type: Cloud.Service.AWS.API.Gateway.Resource
    metadata:
      layoutPosition:
        - 4
        - 3
    properties:
      account: '${input.aws_account}'
      parent_id: '${resource.API_Gateway_Rest.root_resource_id}'
      path_part: reset
      rest_api_id: '${resource.API_Gateway_Rest.id}'
      region: eu-west-1
  Read_Integration:
    type: Cloud.Service.AWS.API.Gateway.Integration
    dependsOn:
      - read
    metadata:
      layoutPosition:
        - 6
        - 1
    properties:
      region: eu-west-1
      account: '${input.aws_account}'
      type: AWS_PROXY
      http_method: '${resource.Method_read.http_method}'
      resource_id: '${resource.Resource_Read.id}'
      rest_api_id: '${resource.API_Gateway_Rest.id}'
      integration_http_method: POST
      uri: 'arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/${resource.read.arn}/invocations'
  Book_Integration:
    type: Cloud.Service.AWS.API.Gateway.Integration
    dependsOn:
      - book
    metadata:
      layoutPosition:
        - 6
        - 2
    properties:
      region: eu-west-1
      account: '${input.aws_account}'
      type: AWS_PROXY
      http_method: '${resource.Method_book.http_method}'
      resource_id: '${resource.Resource_Book.id}'
      rest_api_id: '${resource.API_Gateway_Rest.id}'
      integration_http_method: POST
      uri: 'arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/${resource.book.arn}/invocations'
  Reset_Integration:
    type: Cloud.Service.AWS.API.Gateway.Integration
    dependsOn:
      - reset
    metadata:
      layoutPosition:
        - 6
        - 3
    properties:
      region: eu-west-1
      account: '${input.aws_account}'
      type: AWS_PROXY
      http_method: '${resource.Method_Reset.http_method}'
      resource_id: '${resource.Resource_Reset.id}'
      rest_api_id: '${resource.API_Gateway_Rest.id}'
      integration_http_method: POST
      uri: 'arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/${resource.reset.arn}/invocations'
  read:
    type: Cloud.Service.AWS.Lambda.Function
    metadata:
      layoutPosition:
        - 7
        - 1
    properties:
      role: 'arn:aws:iam::352001968179:role/LambdaExecWithAccessToRDS'
      region: eu-west-1
      account: '${input.aws_account}'
      handler: index.handler
      runtime: nodejs12.x
      function_name: 'read-${env.deploymentName}-${input.customer_name}'
      tags:
        customer_name: '${input.customer_name}'
      #place the S3 bucket name containing the function here
      s3_bucket: titopart4lambdaawsrob
      s3_key: read.zip
      vpc_config:
        #place your subnet ID here
        - subnet_ids:
            - subnet-0d918be8708244110
          #place the security group ID here
          security_group_ids:
            - sg-0d062f4ef74916b35
      environment:
        - variables:
            DB: '${input.architecture == "cheap" ? resource.DB.address : resource.RDS_Cluster_Instance.endpoint[0]}'
  book:
    type: Cloud.Service.AWS.Lambda.Function
    metadata:
      layoutPosition:
        - 7
        - 2
    properties:
      role: 'arn:aws:iam::352001968179:role/LambdaExecWithAccessToRDS'
      region: eu-west-1
      account: '${input.aws_account}'
      handler: index.handler
      runtime: nodejs12.x
      function_name: 'book-${env.deploymentName}-${input.customer_name}'
      tags:
        customer_name: '${input.customer_name}'
      #place the S3 bucket name containing the function here
      s3_bucket: titopart4lambdaawsrob
      s3_key: book.zip
      vpc_config:
        #place your subnet ID here
        - subnet_ids:
            - subnet-0d918be8708244110
          #Place the security group ID here
          security_group_ids:
            - sg-0d062f4ef74916b35
      environment:
        - variables:
            DB: '${input.architecture == "cheap" ? resource.DB.address : resource.RDS_Cluster_Instance.endpoint[0]}'
  reset:
    type: Cloud.Service.AWS.Lambda.Function
    metadata:
      layoutPosition:
        - 7
        - 3
    properties:
      role: 'arn:aws:iam::352001968179:role/LambdaExecWithAccessToRDS'
      region: eu-west-1
      account: '${input.aws_account}'
      handler: index.handler
      runtime: nodejs12.x
      function_name: 'reset-${env.deploymentName}-${input.customer_name}'
      tags:
        customer_name: '${input.customer_name}'
      #place the S3 bucket name containing the function here
      s3_bucket: titopart4lambdaawsrob
      s3_key: reset.zip
      vpc_config:
        #place your subnet ID here
        - subnet_ids:
            - subnet-0d918be8708244110
          #place the security group ID here
          security_group_ids:
            - sg-0d062f4ef74916b35
      environment:
        - variables:
            DB: '${input.architecture == "cheap" ? resource.DB.address : resource.RDS_Cluster_Instance.endpoint[0]}'
  Method_read:
    type: Cloud.Service.AWS.API.Gateway.Method
    metadata:
      layoutPosition:
        - 5
        - 1
    properties:
      account: '${input.aws_account}'
      http_method: GET
      resource_id: '${resource.Resource_Read.id}'
      rest_api_id: '${resource.API_Gateway_Rest.id}'
      authorization: None
      region: eu-west-1
  Method_book:
    type: Cloud.Service.AWS.API.Gateway.Method
    metadata:
      layoutPosition:
        - 5
        - 2
    properties:
      account: '${input.aws_account}'
      http_method: POST
      resource_id: '${resource.Resource_Book.id}'
      rest_api_id: '${resource.API_Gateway_Rest.id}'
      authorization: None
      region: eu-west-1
  Method_Reset:
    type: Cloud.Service.AWS.API.Gateway.Method
    metadata:
      layoutPosition:
        - 5
        - 3
    properties:
      account: '${input.aws_account}'
      http_method: GET
      resource_id: '${resource.Resource_Reset.id}'
      rest_api_id: '${resource.API_Gateway_Rest.id}'
      authorization: None
      region: eu-west-1
  Lambda_Permission_read:
    type: Cloud.Service.AWS.Lambda.Permission
    metadata:
      layoutPosition:
        - 8
        - 1
    properties:
      action: 'lambda:InvokeFunction'
      region: eu-west-1
      account: '${input.aws_account}'
      principal: apigateway.amazonaws.com
      function_name: '${resource.read.function_name}'
      statement_id: AllowExecutionFromAPIGatewayforRead
  Lambda_Permission_book:
    type: Cloud.Service.AWS.Lambda.Permission
    metadata:
      layoutPosition:
        - 8
        - 2
    properties:
      action: 'lambda:InvokeFunction'
      region: eu-west-1
      account: '${input.aws_account}'
      principal: apigateway.amazonaws.com
      function_name: '${resource.book.function_name}'
      statement_id: AllowExecutionFromAPIGatewayforBook
  Lambda_Permission_reset:
    type: Cloud.Service.AWS.Lambda.Permission
    metadata:
      layoutPosition:
        - 8
        - 3
    properties:
      action: 'lambda:InvokeFunction'
      region: eu-west-1
      account: '${input.aws_account}'
      principal: apigateway.amazonaws.com
      function_name: '${resource.reset.function_name}'
      statement_id: AllowExecutionFromAPIGatewayforReset
  RDS_Cluster_Instance:
    type: Cloud.Service.AWS.RDS.Cluster.Instance
    metadata:
      layoutPosition:
        - 9
        - 2
    properties:
      engine: aurora-mysql
      identifier: '${input.customer_name}'
      region: eu-west-1
      account: '${input.aws_account}'
      instance_class: db.t2.small
      cluster_identifier: '${resource.RDS_Cluster[0].id}'
      availability_zone: eu-west-1a
      publicly_accessible: true
      #place the subnet group name here
      db_subnet_group_name: subnetgrouptito
      count: '${input.architecture == "cheap" ? 0 : 1}'
  RDS_Cluster:
    type: Cloud.Service.AWS.RDS.Cluster
    metadata:
      layoutPosition:
        - 10
        - 2
    properties:
      region: eu-west-1
      account: '${input.aws_account}'
      engine: aurora-mysql
      master_username: root
      master_password: Tito2016
      skip_final_snapshot: true
      #place the subnet group name here
      db_subnet_group_name: subnetgrouptito
      #place the security group ID here
      vpc_security_group_ids:
        - sg-0d062f4ef74916b35
      count: '${input.architecture == "cheap" ? 0 : 1}'
